//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution{
    private:
    int f(int idx, int len, int price[], vector <vector<int>> &dp)
    {
        // base case
        if( len == 0) return 0;
        
        if( idx == 0)
        {
            return len * price[0];
        }
        
        if( dp[idx][len] != -1) return dp[idx][len];
        
        int notTake = 0 +  f(idx-1, len, price, dp);
        
        int take = 0;
        
        int currLen = idx+1;
        
        if( currLen <= len )
        {
            take = price[idx] + f(idx, len - currLen, price, dp);
        }
        
        return dp[idx][len] = max(take, notTake);
    }
  public:
    int cutRod(int price[], int n) {
        
        /*
        f('i' , L') represents max value that can be generated by considering
        rods of from index 1 to 'i' if length of rod is 'L'.
        */
        vector <vector<int>> dp(n, vector <int> (n+1, -1) );
        return f(n-1, n, price, dp);
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) 
            cin >> a[i];
            
        Solution ob;

        cout << ob.cutRod(a, n) << endl;
    }
    return 0;
}
// } Driver Code Ends